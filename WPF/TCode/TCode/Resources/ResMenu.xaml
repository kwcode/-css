<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TCode">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ResShared.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <!--滚动按钮  -->
    <Style x:Key="MenuScrollButton" TargetType="{x:Type RepeatButton}"  BasedOn="{x:Null}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="Transparent" />
                        <ContentPresenter x:Name="ContentContainer" Margin="2,2,2,2" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollViewer for a MenuItem-->
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility"  Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"  Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Grid.Row="0"  Grid.Column="0"  Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource UpArrow}" />
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource MenuScrollButton}" Grid.Row="2" Grid.Column="0" Command="{x:Static ScrollBar.LineDownCommand}" 
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource DownArrow}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--顶级菜单的Header -->
    <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="local:HLMenuItem">
        <Border x:Name="Border" BorderBrush="Transparent"  Background="Transparent"
                BorderThickness="0">
            <Grid>
                <ContentPresenter Margin="6,0,6,0" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" />
                <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" >
                    <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1"
                            BorderBrush="Gray" 
                            Background="White">
                        <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}" Padding="0" Margin="0">
                            <StackPanel IsItemsHost="True"  KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}" />
                <Setter Property="BorderBrush" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}" />
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency"  Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--顶级菜单项，没有子菜单 -->
    <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="local:HLMenuItem">
        <Border x:Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}">
                </Setter>
                <Setter Property="BorderBrush" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}">
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- 子菜单项 -->
    <ControlTemplate x:Key="SubmenuItemTemplateKey"  TargetType="local:HLMenuItem" >
        <Grid Background="White" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="30"  SharedSizeGroup="Icon"   />
                <ColumnDefinition Width="*"   />
            </Grid.ColumnDefinitions>
            <Border x:Name="ExBD" Grid.Column="0" BorderThickness="1,1,0,1" >
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                        <GradientStop Color="White" Offset="0"></GradientStop>
                        <GradientStop Color="#dadada" Offset="1"></GradientStop>
                    </LinearGradientBrush>
                </Border.Background>
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                        <GradientStop Color="White" Offset="0"></GradientStop>
                        <GradientStop Color="#dadada" Offset="1"></GradientStop>
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>

            <ContentPresenter x:Name="Icon" Margin="6,0,6,0"  VerticalAlignment="Center" ContentSource="Icon" />

            <Border x:Name="Check" Grid.Column="0"  Width="16" Height="16" Visibility="Collapsed" Margin="0,0,0,0" BorderThickness="0">
                <!--<Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0">
                        <Path.Stroke>
                            <SolidColorBrush Color="Black" />
                        </Path.Stroke>
                    </Path>-->
                <!--<TextBlock x:Name="CheckMark"  Visibility="Hidden" SnapsToDevicePixels="False" Text="√" FontWeight="Bold" FontSize="12" Margin="0,-1,0,0"></TextBlock>-->
                <Image  x:Name="CheckMark" Visibility="Hidden"  Source="/TCode;Component/AdditionalControls/check.ico"></Image>
            </Border>

            <Border x:Name="Close"  Grid.Column="0"  Width="16" Height="16" Visibility="Collapsed" Margin="0,0,0,0" BorderThickness="0">
                <!--<TextBlock x:Name="CloseMark" SnapsToDevicePixels="False" Text="╳" FontWeight="Bold" FontSize="10" Margin="0,-1,0,0"></TextBlock>-->
                <!--<baseCtrl:HLCloseButton x:Name="CloseMark"   Margin="0,-2,0,0" SnapsToDevicePixels="False"></baseCtrl:HLCloseButton>-->
                <Image  x:Name="CloseMark"   Source="/TCode;Component/AdditionalControls/close.ico"></Image>
            </Border>

            <Border Grid.Column="1" x:Name="Border" BorderThickness="0,1,1,1" Margin="0,1,1,1" BorderBrush="White" Background="White" >
                <!---->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="23"></RowDefinition>
                </Grid.RowDefinitions>
            <ContentPresenter x:Name="HeaderHost" Grid.Row="0" Grid.Column="1" Margin="5,0" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" />
            <TextBlock x:Name="InputGestureText" Grid.Row="0" Grid.Column="2"  Text="{TemplateBinding InputGestureText}" Margin="20,2,2,2"  VerticalAlignment="Center"  />
        </Grid>
        </Border>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsClosable" Value="true"></Condition>
                    <Condition  Property="IsHighlighted" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <Setter TargetName="Close" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                <Setter TargetName="Check" Property="Visibility" Value="Hidden" />
            </MultiTrigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                <Setter Property="BorderBrush" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                
                <Setter Property="BorderBrush" TargetName="ExBD" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                <Setter Property="Background" TargetName="ExBD" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                <Setter Property="Margin" TargetName="ExBD" Value="1,1,0,1"></Setter>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--有子菜单的菜单项-->
                <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="local:HLMenuItem">
                    <Grid Background="White">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="ExBD" Grid.Column="0" BorderThickness="1,1,0,1" >
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                    <GradientStop Color="White" Offset="0"></GradientStop>
                                    <GradientStop Color="#dadada" Offset="1"></GradientStop>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                    <GradientStop Color="White" Offset="0"></GradientStop>
                                    <GradientStop Color="#dadada" Offset="1"></GradientStop>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                        <Border x:Name="Border" Grid.Column="1"  BorderThickness="0,1,1,1" Margin="0,1,1,1" BorderBrush="White" Background="White" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                                    <ColumnDefinition Width="13" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="23"></RowDefinition>
                                </Grid.RowDefinitions>
                                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" Margin="5,0,0,0" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" />
                                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="20,2,2,2" DockPanel.Dock="Right"  VerticalAlignment="Center" />
                                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z">
                                    <Path.Fill>
                                        <SolidColorBrush Color="Black" />
                                    </Path.Fill>
                                </Path>
                                <Popup x:Name="Popup" Placement="Right" HorizontalOffset="0" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True"
                           Focusable="False" PopupAnimation="Fade">
                                    <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True"   BorderThickness="1" Margin="1" BorderBrush="Gray" Background="White" >
                                        <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}" Padding="0" Margin="0">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                            <Setter Property="BorderBrush" TargetName="Border" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>

                            <Setter Property="BorderBrush" TargetName="ExBD" 
                        Value="{Binding Path=HLSelectedMenuItemBorderBrush, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>

                            <Setter Property="Background" TargetName="ExBD" 
                        Value="{Binding Path=HLSelectedMenuItemBackground, RelativeSource={RelativeSource AncestorType=local:HLMenuItem}}"></Setter>
                            <Setter Property="Margin" TargetName="ExBD" Value="1,1,0,1"></Setter>

                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                            <Setter TargetName="SubmenuBorder" Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <!--按如下方式更改菜单的Separator达不到效果，所以改用资源加载的方式。比较而言，下面这种方式如果能成功则更好。-->
                <!--分隔条样式-->
                <!--<Style x:Key="DDD" TargetType="local:HLSeparator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:HLSeparator">
                    <Grid Background="LightGray">
                        <Border Height="1" Margin="1"  Background="Red"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

                <!-- 菜单项样式 -->
                <Style  TargetType="local:HLMenuItem">
                    <!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
                    <!--<Setter Property="MinWidth" Value="40" />-->
                    <Style.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>

                <!--菜单样式-->
                <Style TargetType="local:HLMenu">
                    <!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="local:HLMenu">
                                <Border Background="{Binding Path=HLPopupMenuBackground,RelativeSource={RelativeSource AncestorType=local:HLMenu}}" 
                            BorderBrush="Red" BorderThickness="0" Margin="0" Padding="0">
                                    <StackPanel ClipToBounds="True" Orientation="Horizontal" HorizontalAlignment="Center" IsItemsHost="True" Margin="0" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <!--右键菜单-->
                <Style x:Key="{x:Type local:HLContextMenu}" TargetType="local:HLContextMenu">
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="local:HLContextMenu">
                                <Border x:Name="Border"  BorderThickness="1" BorderBrush="{TemplateBinding HLPopupMenuBorderBrush}" Background="{TemplateBinding HLPopupMenuBackground}">
                                    <StackPanel x:Name="host_part" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"   />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
</ResourceDictionary>